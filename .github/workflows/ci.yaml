name: Secure CI Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      # 1. Baixar código
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Instalar dependências do projeto
      - name: Install dependencies
        run: |
          pip install -r app/requirements.txt
          pip install pytest

      # 3.1 Rodar teste com pytest      
      - name: Run tests with pytest
        run: pytest app/tests

      # 4. Buscar segredos expostos no código
      - name: Secret scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git --redact

      # 5. Checar vulnerabilidades em dependências Python
      - name: Dependency scan with pip-audit
        run: pip install pip-audit && pip-audit

      # 6. Lint de segurança no código Python
      - name: Static analysis with Bandit
        run: pip install bandit && bandit -r app

  docker-security:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      # 1. Baixar código
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Login no Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Build da imagem Docker
      - name: Build Docker image
        run: docker build -t flask-app:latest ./app

      # 4. Push da imagem se passar nos testes
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest
